/* Generated By:JavaCC: Do not edit this line. PrologParser.java */
package apapl.parser.prolog;

import apapl.beliefinertia.dependencyset.InferenceRules;

/**
 * Basic Prolog parsing for belief inertia. 
 * Collect the predicates and heads of all inference rules and store them in a hashmap indexed by the head
 * Omit built-in predicates, and add "rand" if it is used in the rule.
 * See apapl.BeliefInertia.BeliefInertia.
 * 
 * Original JavaCC parser by Bas Testerink, Java code changed by Marc van Zee for belief inertia
 * 
 * @author Bas Testerink Utrecht University, The Netherlands
 * 
 */
public class PrologParser implements PrologParserConstants {

// PROLOG: 
  final public void Argument(InferenceRules rules, boolean isHead, boolean isPredicate) throws ParseException {
    if (jj_2_1(2147483647)) {
      Infix(rules, isHead, isPredicate);
    } else if (jj_2_2(2147483647)) {
      Number();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER_LITERAL:
      case STD_IDENTIFIER:
      case SEMICOLON:
      case NOTSPACE:
      case ADD:
      case SUBTRACT:
      case IMPLY:
      case MULTIPLY:
      case POWER:
      case DIVIDE:
      case BITAND:
      case UNIFICATION:
      case ARITHUNIF:
      case ARITHNOTUNIF:
      case EQLT:
      case TERMDECOMPOSITION:
      case EQUALS:
      case BACKSLASH:
      case NOT:
      case BITOR:
      case NOTUNIFIABLE:
      case NOTEQUALS:
      case TERMGTEQ:
      case TERMEQLT:
      case TERMLT:
      case TERMGT:
      case TERMEQ:
      case TERMNEQ:
      case LT:
      case SHIFTLEFT:
      case GT:
      case SHIFTRIGHT:
      case GTEQ:
      case ASSIGN:
      case POWER2:
      case XOR:
      case REMAINDER:
      case INTDIVIDE:
      case MODULO:
      case COLON:
      case NORMAND:
        Predicate(rules, isHead, isPredicate);
        break;
      case LPAREN:
        Parenthesized(rules, isHead, isPredicate);
        break;
      case VAR_IDENTIFIER:
        Var();
        break;
      case LBRACKET:
        List(rules, isHead, isPredicate);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Number() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUBTRACT:
      jj_consume_token(SUBTRACT);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Predicate(InferenceRules rules, boolean isHead, boolean isPredicate) throws ParseException {
        Token pred;
        String predImg;
    if (jj_2_3(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOTSPACE:
        jj_consume_token(NOTSPACE);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      pred = jj_consume_token(STD_IDENTIFIER);
                        predImg = pred.image;
                        if (!isPredicate)               rules.addFunction(predImg);
                        else if (isHead)                rules.setCurrentHead(predImg);
                                 else                           rules.addPredicate(predImg);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER_LITERAL:
        jj_consume_token(CHARACTER_LITERAL);
        break;
      case SEMICOLON:
      case NOTSPACE:
      case ADD:
      case SUBTRACT:
      case IMPLY:
      case MULTIPLY:
      case POWER:
      case DIVIDE:
      case BITAND:
      case UNIFICATION:
      case ARITHUNIF:
      case ARITHNOTUNIF:
      case EQLT:
      case TERMDECOMPOSITION:
      case EQUALS:
      case BACKSLASH:
      case NOT:
      case BITOR:
      case NOTUNIFIABLE:
      case NOTEQUALS:
      case TERMGTEQ:
      case TERMEQLT:
      case TERMLT:
      case TERMGT:
      case TERMEQ:
      case TERMNEQ:
      case LT:
      case SHIFTLEFT:
      case GT:
      case SHIFTRIGHT:
      case GTEQ:
      case ASSIGN:
      case POWER2:
      case XOR:
      case REMAINDER:
      case INTDIVIDE:
      case MODULO:
      case COLON:
      case NORMAND:
        Operator();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      Argument(rules, isHead, false);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        Argument(rules, isHead, false);
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  final public void Operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      jj_consume_token(ADD);
      break;
    case SUBTRACT:
      jj_consume_token(SUBTRACT);
      break;
    case IMPLY:
      jj_consume_token(IMPLY);
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      break;
    case POWER:
      jj_consume_token(POWER);
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      break;
    case BITAND:
      jj_consume_token(BITAND);
      break;
    case UNIFICATION:
      jj_consume_token(UNIFICATION);
      break;
    case ARITHUNIF:
      jj_consume_token(ARITHUNIF);
      break;
    case ARITHNOTUNIF:
      jj_consume_token(ARITHNOTUNIF);
      break;
    case EQLT:
      jj_consume_token(EQLT);
      break;
    case TERMDECOMPOSITION:
      jj_consume_token(TERMDECOMPOSITION);
      break;
    case EQUALS:
      jj_consume_token(EQUALS);
      break;
    case BACKSLASH:
      jj_consume_token(BACKSLASH);
      break;
    case BITOR:
      jj_consume_token(BITOR);
      break;
    case NOTUNIFIABLE:
      jj_consume_token(NOTUNIFIABLE);
      break;
    case NOTEQUALS:
      jj_consume_token(NOTEQUALS);
      break;
    case TERMGTEQ:
      jj_consume_token(TERMGTEQ);
      break;
    case TERMEQLT:
      jj_consume_token(TERMEQLT);
      break;
    case TERMLT:
      jj_consume_token(TERMLT);
      break;
    case TERMGT:
      jj_consume_token(TERMGT);
      break;
    case TERMEQ:
      jj_consume_token(TERMEQ);
      break;
    case TERMNEQ:
      jj_consume_token(TERMNEQ);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    case SHIFTLEFT:
      jj_consume_token(SHIFTLEFT);
      break;
    case GT:
      jj_consume_token(GT);
      break;
    case SHIFTRIGHT:
      jj_consume_token(SHIFTRIGHT);
      break;
    case GTEQ:
      jj_consume_token(GTEQ);
      break;
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case POWER2:
      jj_consume_token(POWER2);
      break;
    case XOR:
      jj_consume_token(XOR);
      break;
    case REMAINDER:
      jj_consume_token(REMAINDER);
      break;
    case INTDIVIDE:
      jj_consume_token(INTDIVIDE);
      break;
    case MODULO:
      jj_consume_token(MODULO);
      break;
    case COLON:
      jj_consume_token(COLON);
      break;
    case NORMAND:
      jj_consume_token(NORMAND);
      break;
    case NOTSPACE:
      jj_consume_token(NOTSPACE);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Bodypart(InferenceRules rules) throws ParseException {
    if (jj_2_4(2147483647)) {
      Infix(rules, false, true);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER_LITERAL:
      case STD_IDENTIFIER:
      case SEMICOLON:
      case NOTSPACE:
      case ADD:
      case SUBTRACT:
      case IMPLY:
      case MULTIPLY:
      case POWER:
      case DIVIDE:
      case BITAND:
      case UNIFICATION:
      case ARITHUNIF:
      case ARITHNOTUNIF:
      case EQLT:
      case TERMDECOMPOSITION:
      case EQUALS:
      case BACKSLASH:
      case NOT:
      case BITOR:
      case NOTUNIFIABLE:
      case NOTEQUALS:
      case TERMGTEQ:
      case TERMEQLT:
      case TERMLT:
      case TERMGT:
      case TERMEQ:
      case TERMNEQ:
      case LT:
      case SHIFTLEFT:
      case GT:
      case SHIFTRIGHT:
      case GTEQ:
      case ASSIGN:
      case POWER2:
      case XOR:
      case REMAINDER:
      case INTDIVIDE:
      case MODULO:
      case COLON:
      case NORMAND:
        Predicate(rules, false, true);
        break;
      case LPAREN:
        Parenthesized(rules, false, true);
        break;
      case VAR_IDENTIFIER:
        Var();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Infix(InferenceRules rules, boolean inHead, boolean isPredicate) throws ParseException {
    if (jj_2_5(2147483647)) {
      Number();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER_LITERAL:
      case STD_IDENTIFIER:
      case SEMICOLON:
      case NOTSPACE:
      case ADD:
      case SUBTRACT:
      case IMPLY:
      case MULTIPLY:
      case POWER:
      case DIVIDE:
      case BITAND:
      case UNIFICATION:
      case ARITHUNIF:
      case ARITHNOTUNIF:
      case EQLT:
      case TERMDECOMPOSITION:
      case EQUALS:
      case BACKSLASH:
      case NOT:
      case BITOR:
      case NOTUNIFIABLE:
      case NOTEQUALS:
      case TERMGTEQ:
      case TERMEQLT:
      case TERMLT:
      case TERMGT:
      case TERMEQ:
      case TERMNEQ:
      case LT:
      case SHIFTLEFT:
      case GT:
      case SHIFTRIGHT:
      case GTEQ:
      case ASSIGN:
      case POWER2:
      case XOR:
      case REMAINDER:
      case INTDIVIDE:
      case MODULO:
      case COLON:
      case NORMAND:
        Predicate(rules, inHead, isPredicate);
        break;
      case LPAREN:
        Parenthesized(rules, inHead, isPredicate);
        break;
      case VAR_IDENTIFIER:
        Var();
        break;
      case LBRACKET:
        List(rules, inHead, isPredicate);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    Operator();
    Argument(rules, inHead, isPredicate);
  }

  final public void List(InferenceRules rules, boolean inHead, boolean isPredicate) throws ParseException {
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STD_IDENTIFIER:
    case VAR_IDENTIFIER:
    case LPAREN:
    case LBRACKET:
    case SEMICOLON:
    case NOTSPACE:
    case ADD:
    case SUBTRACT:
    case IMPLY:
    case MULTIPLY:
    case POWER:
    case DIVIDE:
    case BITAND:
    case UNIFICATION:
    case ARITHUNIF:
    case ARITHNOTUNIF:
    case EQLT:
    case TERMDECOMPOSITION:
    case EQUALS:
    case BACKSLASH:
    case NOT:
    case BITOR:
    case NOTUNIFIABLE:
    case NOTEQUALS:
    case TERMGTEQ:
    case TERMEQLT:
    case TERMLT:
    case TERMGT:
    case TERMEQ:
    case TERMNEQ:
    case LT:
    case SHIFTLEFT:
    case GT:
    case SHIFTRIGHT:
    case GTEQ:
    case ASSIGN:
    case POWER2:
    case XOR:
    case REMAINDER:
    case INTDIVIDE:
    case MODULO:
    case COLON:
    case NORMAND:
      ListPart(rules, inHead, false);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(RBRACKET);
  }

  final public void ListPart(InferenceRules rules, boolean inHead, boolean isPredicate) throws ParseException {
    Argument(rules, inHead, isPredicate);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
    case BAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        ListPart(rules, inHead, isPredicate);
        break;
      case BAR:
        jj_consume_token(BAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          List(rules, inHead, isPredicate);
          break;
        case VAR_IDENTIFIER:
          Var();
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  final public void Parenthesized(InferenceRules rules, boolean inHead, boolean isPredicate) throws ParseException {
    jj_consume_token(LPAREN);
    Argument(rules, inHead, isPredicate);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      Argument(rules, inHead, isPredicate);
    }
    jj_consume_token(RPAREN);
  }

  final public void Var() throws ParseException {
    jj_consume_token(VAR_IDENTIFIER);
  }

  final public void Rule(InferenceRules rules) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTION:
      jj_consume_token(QUESTION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STD_IDENTIFIER:
      case VAR_IDENTIFIER:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case NOTSPACE:
      case ADD:
      case SUBTRACT:
      case IMPLY:
      case MULTIPLY:
      case POWER:
      case DIVIDE:
      case BITAND:
      case UNIFICATION:
      case ARITHUNIF:
      case ARITHNOTUNIF:
      case EQLT:
      case TERMDECOMPOSITION:
      case EQUALS:
      case BACKSLASH:
      case NOT:
      case BITOR:
      case NOTUNIFIABLE:
      case NOTEQUALS:
      case TERMGTEQ:
      case TERMEQLT:
      case TERMLT:
      case TERMGT:
      case TERMEQ:
      case TERMNEQ:
      case LT:
      case SHIFTLEFT:
      case GT:
      case SHIFTRIGHT:
      case GTEQ:
      case ASSIGN:
      case POWER2:
      case XOR:
      case REMAINDER:
      case INTDIVIDE:
      case MODULO:
      case COLON:
      case NORMAND:
        Bodypart(null);
        break;
      case BANG:
        jj_consume_token(BANG);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        label_3:
        while (true) {
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STD_IDENTIFIER:
          case VAR_IDENTIFIER:
          case LPAREN:
          case LBRACKET:
          case SEMICOLON:
          case NOTSPACE:
          case ADD:
          case SUBTRACT:
          case IMPLY:
          case MULTIPLY:
          case POWER:
          case DIVIDE:
          case BITAND:
          case UNIFICATION:
          case ARITHUNIF:
          case ARITHNOTUNIF:
          case EQLT:
          case TERMDECOMPOSITION:
          case EQUALS:
          case BACKSLASH:
          case NOT:
          case BITOR:
          case NOTUNIFIABLE:
          case NOTEQUALS:
          case TERMGTEQ:
          case TERMEQLT:
          case TERMLT:
          case TERMGT:
          case TERMEQ:
          case TERMNEQ:
          case LT:
          case SHIFTLEFT:
          case GT:
          case SHIFTRIGHT:
          case GTEQ:
          case ASSIGN:
          case POWER2:
          case XOR:
          case REMAINDER:
          case INTDIVIDE:
          case MODULO:
          case COLON:
          case NORMAND:
            Bodypart(null);
            break;
          case BANG:
            jj_consume_token(BANG);
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[17] = jj_gen;
            break label_3;
          }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      break;
    case CHARACTER_LITERAL:
    case STD_IDENTIFIER:
    case SEMICOLON:
    case NOTSPACE:
    case ADD:
    case SUBTRACT:
    case IMPLY:
    case MULTIPLY:
    case POWER:
    case DIVIDE:
    case BITAND:
    case UNIFICATION:
    case ARITHUNIF:
    case ARITHNOTUNIF:
    case EQLT:
    case TERMDECOMPOSITION:
    case EQUALS:
    case BACKSLASH:
    case NOT:
    case BITOR:
    case NOTUNIFIABLE:
    case NOTEQUALS:
    case TERMGTEQ:
    case TERMEQLT:
    case TERMLT:
    case TERMGT:
    case TERMEQ:
    case TERMNEQ:
    case LT:
    case SHIFTLEFT:
    case GT:
    case SHIFTRIGHT:
    case GTEQ:
    case ASSIGN:
    case POWER2:
    case XOR:
    case REMAINDER:
    case INTDIVIDE:
    case MODULO:
    case COLON:
    case NORMAND:
      Predicate(rules, true, true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        jj_consume_token(SUBTRACT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STD_IDENTIFIER:
        case VAR_IDENTIFIER:
        case LPAREN:
        case LBRACKET:
        case SEMICOLON:
        case NOTSPACE:
        case ADD:
        case SUBTRACT:
        case IMPLY:
        case MULTIPLY:
        case POWER:
        case DIVIDE:
        case BITAND:
        case UNIFICATION:
        case ARITHUNIF:
        case ARITHNOTUNIF:
        case EQLT:
        case TERMDECOMPOSITION:
        case EQUALS:
        case BACKSLASH:
        case NOT:
        case BITOR:
        case NOTUNIFIABLE:
        case NOTEQUALS:
        case TERMGTEQ:
        case TERMEQLT:
        case TERMLT:
        case TERMGT:
        case TERMEQ:
        case TERMNEQ:
        case LT:
        case SHIFTLEFT:
        case GT:
        case SHIFTRIGHT:
        case GTEQ:
        case ASSIGN:
        case POWER2:
        case XOR:
        case REMAINDER:
        case INTDIVIDE:
        case MODULO:
        case COLON:
        case NORMAND:
          Bodypart(rules);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          label_4:
          while (true) {
            jj_consume_token(COMMA);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STD_IDENTIFIER:
            case VAR_IDENTIFIER:
            case LPAREN:
            case LBRACKET:
            case SEMICOLON:
            case NOTSPACE:
            case ADD:
            case SUBTRACT:
            case IMPLY:
            case MULTIPLY:
            case POWER:
            case DIVIDE:
            case BITAND:
            case UNIFICATION:
            case ARITHUNIF:
            case ARITHNOTUNIF:
            case EQLT:
            case TERMDECOMPOSITION:
            case EQUALS:
            case BACKSLASH:
            case NOT:
            case BITOR:
            case NOTUNIFIABLE:
            case NOTEQUALS:
            case TERMGTEQ:
            case TERMEQLT:
            case TERMLT:
            case TERMGT:
            case TERMEQ:
            case TERMNEQ:
            case LT:
            case SHIFTLEFT:
            case GT:
            case SHIFTRIGHT:
            case GTEQ:
            case ASSIGN:
            case POWER2:
            case XOR:
            case REMAINDER:
            case INTDIVIDE:
            case MODULO:
            case COLON:
            case NORMAND:
              Bodypart(rules);
              break;
            case BANG:
              jj_consume_token(BANG);
              break;
            default:
              jj_la1[20] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[21] = jj_gen;
              break label_4;
            }
          }
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DOT);
  }

  final public void Directive() throws ParseException {
    jj_consume_token(COLON);
    jj_consume_token(SUBTRACT);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case STD_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STD_IDENTIFIER:
        jj_consume_token(STD_IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIVIDE:
          jj_consume_token(DIVIDE);
          jj_consume_token(INTEGER_LITERAL);
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        break;
      case INTEGER_LITERAL:
        jj_consume_token(INTEGER_LITERAL);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(DOT);
  }

  final public InferenceRules Prolog() throws ParseException {
        InferenceRules rules = new InferenceRules();
    label_6:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_6;
      }
      Directive();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHARACTER_LITERAL:
      case STD_IDENTIFIER:
      case SEMICOLON:
      case NOTSPACE:
      case ADD:
      case SUBTRACT:
      case IMPLY:
      case MULTIPLY:
      case POWER:
      case DIVIDE:
      case BITAND:
      case UNIFICATION:
      case ARITHUNIF:
      case ARITHNOTUNIF:
      case EQLT:
      case TERMDECOMPOSITION:
      case EQUALS:
      case BACKSLASH:
      case NOT:
      case BITOR:
      case NOTUNIFIABLE:
      case NOTEQUALS:
      case TERMGTEQ:
      case TERMEQLT:
      case TERMLT:
      case TERMGT:
      case TERMEQ:
      case TERMNEQ:
      case LT:
      case SHIFTLEFT:
      case GT:
      case SHIFTRIGHT:
      case GTEQ:
      case ASSIGN:
      case POWER2:
      case XOR:
      case REMAINDER:
      case INTDIVIDE:
      case MODULO:
      case COLON:
      case NORMAND:
      case QUESTION:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_7;
      }
      Rule(rules);
    }
    jj_consume_token(0);
          {if (true) return rules;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(SUBTRACT)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(BAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    }
    }
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_scan_token(STD_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_26()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public PrologParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8a3a0000,0x0,0x18000,0x80000000,0x88020000,0x10000000,0x200000,0x88000000,0x883a0000,0x8a3a0000,0x8a3b8000,0x2100000,0x10000000,0x10000000,0x10000000,0xca3b8000,0xca3b8000,0x10000000,0x10000000,0xca3b8000,0xca3b8000,0x10000000,0x10000000,0x0,0x880a0000,0x88000,0x0,0x88000,0x880a0000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xffffffff,0x2,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0xffffffff,0x0,0x20,0x0,0xffffffff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x4f,0x0,0x0,0x0,0x4f,0x0,0x0,0x4f,0x4f,0x4f,0x4f,0x0,0x10,0x10,0x0,0x4f,0x4f,0x0,0x0,0x4f,0x4f,0x0,0x0,0x8,0x14f,0x0,0x0,0x0,0x14f,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PrologParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PrologParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PrologParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PrologParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PrologParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PrologParser(PrologParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PrologParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[73];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 73; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
