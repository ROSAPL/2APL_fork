/* Generated By:JavaCC: Do not edit this line. PrologParserConstants.java */
package apapl.parser.prolog;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PrologParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT_STD_PROLOG = 11;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 12;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 13;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 15;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 16;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 17;
  /** RegularExpression Id. */
  int STRING_LITERAL = 18;
  /** RegularExpression Id. */
  int STD_IDENTIFIER = 19;
  /** RegularExpression Id. */
  int VAR_IDENTIFIER = 20;
  /** RegularExpression Id. */
  int LPAREN = 21;
  /** RegularExpression Id. */
  int RPAREN = 22;
  /** RegularExpression Id. */
  int LBRACE = 23;
  /** RegularExpression Id. */
  int RBRACE = 24;
  /** RegularExpression Id. */
  int LBRACKET = 25;
  /** RegularExpression Id. */
  int RBRACKET = 26;
  /** RegularExpression Id. */
  int SEMICOLON = 27;
  /** RegularExpression Id. */
  int COMMA = 28;
  /** RegularExpression Id. */
  int DOT = 29;
  /** RegularExpression Id. */
  int BANG = 30;
  /** RegularExpression Id. */
  int NOTSPACE = 31;
  /** RegularExpression Id. */
  int ADD = 32;
  /** RegularExpression Id. */
  int SUBTRACT = 33;
  /** RegularExpression Id. */
  int IMPLY = 34;
  /** RegularExpression Id. */
  int MULTIPLY = 35;
  /** RegularExpression Id. */
  int POWER = 36;
  /** RegularExpression Id. */
  int DIVIDE = 37;
  /** RegularExpression Id. */
  int BITAND = 38;
  /** RegularExpression Id. */
  int UNIFICATION = 39;
  /** RegularExpression Id. */
  int ARITHUNIF = 40;
  /** RegularExpression Id. */
  int ARITHNOTUNIF = 41;
  /** RegularExpression Id. */
  int EQLT = 42;
  /** RegularExpression Id. */
  int TERMDECOMPOSITION = 43;
  /** RegularExpression Id. */
  int EQUALS = 44;
  /** RegularExpression Id. */
  int BACKSLASH = 45;
  /** RegularExpression Id. */
  int NOT = 46;
  /** RegularExpression Id. */
  int BITOR = 47;
  /** RegularExpression Id. */
  int NOTUNIFIABLE = 48;
  /** RegularExpression Id. */
  int NOTEQUALS = 49;
  /** RegularExpression Id. */
  int TERMGTEQ = 50;
  /** RegularExpression Id. */
  int TERMEQLT = 51;
  /** RegularExpression Id. */
  int TERMLT = 52;
  /** RegularExpression Id. */
  int TERMGT = 53;
  /** RegularExpression Id. */
  int TERMEQ = 54;
  /** RegularExpression Id. */
  int TERMNEQ = 55;
  /** RegularExpression Id. */
  int LT = 56;
  /** RegularExpression Id. */
  int SHIFTLEFT = 57;
  /** RegularExpression Id. */
  int GT = 58;
  /** RegularExpression Id. */
  int SHIFTRIGHT = 59;
  /** RegularExpression Id. */
  int GTEQ = 60;
  /** RegularExpression Id. */
  int ASSIGN = 61;
  /** RegularExpression Id. */
  int POWER2 = 62;
  /** RegularExpression Id. */
  int XOR = 63;
  /** RegularExpression Id. */
  int REMAINDER = 64;
  /** RegularExpression Id. */
  int INTDIVIDE = 65;
  /** RegularExpression Id. */
  int MODULO = 66;
  /** RegularExpression Id. */
  int COLON = 67;
  /** RegularExpression Id. */
  int BAR = 68;
  /** RegularExpression Id. */
  int NORMIMPLY = 69;
  /** RegularExpression Id. */
  int NORMAND = 70;
  /** RegularExpression Id. */
  int DOLLAR = 71;
  /** RegularExpression Id. */
  int QUESTION = 72;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT_STD_PROLOG = 2;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 3;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 4;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "\"%\"",
    "<token of kind 8>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "<SINGLE_LINE_COMMENT_STD_PROLOG>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 14>",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<STD_IDENTIFIER>",
    "<VAR_IDENTIFIER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"!\"",
    "\"not \"",
    "\"+\"",
    "\"-\"",
    "\"->\"",
    "\"*\"",
    "\"**\"",
    "\"/\"",
    "\"/\\\\\"",
    "\"=\"",
    "\"=:=\"",
    "\"=\\\\=\"",
    "\"=<\"",
    "\"=..\"",
    "\"==\"",
    "\"\\\\\"",
    "\"\\\\+\"",
    "\"\\\\/\"",
    "\"\\\\=\"",
    "\"\\\\==\"",
    "\"@>=\"",
    "\"@=<\"",
    "\"@<\"",
    "\"@>\"",
    "\"@==\"",
    "\"@\\\\=\"",
    "\"<\"",
    "\"<<\"",
    "\">\"",
    "\">>\"",
    "\">=\"",
    "\" is \"",
    "\"^\"",
    "\" xor \"",
    "\" rem \"",
    "\" div \"",
    "\" mod \"",
    "\":\"",
    "\"|\"",
    "\"=>\"",
    "\"and \"",
    "\"$\"",
    "\"?\"",
  };

}
