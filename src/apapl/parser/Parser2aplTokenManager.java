/* Generated By:JavaCC: Do not edit this line. Parser2aplTokenManager.java */
package apapl.parser;
import apapl.UnboundedVarException;
import apapl.data.*;
import apapl.program.*;
import apapl.plans.*;
import apapl.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.io.File;

/** Token Manager. */
public class Parser2aplTokenManager implements Parser2aplConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 82;
            return 80;
         }
         if ((active0 & 0x140L) != 0L || (active1 & 0x40000040L) != 0L)
            return 2;
         if ((active1 & 0x80L) != 0L)
            return 14;
         if ((active0 & 0x80000400000000L) != 0L)
         {
            jjmatchedKind = 84;
            return 38;
         }
         if ((active0 & 0xf67f7f83f8000000L) != 0L)
         {
            jjmatchedKind = 84;
            return 99;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 85;
            return 100;
         }
         if ((active0 & 0x3f80000L) != 0L || (active1 & 0x16L) != 0L)
            return 100;
         if ((active0 & 0x900000004000000L) != 0L)
         {
            jjmatchedKind = 84;
            return 25;
         }
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0x3fc0000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
            return 100;
         }
         if ((active0 & 0xffff7f83b4000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
            return 99;
         }
         if ((active0 & 0x448000000L) != 0L)
            return 99;
         return -1;
      case 2:
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xfffe7f83a0000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 2;
            return 99;
         }
         if ((active0 & 0x23c0000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 2;
            return 100;
         }
         if ((active0 & 0x1000014000000L) != 0L)
            return 99;
         return -1;
      case 3:
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xbffe7e0200000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 3;
            return 99;
         }
         if ((active0 & 0x23c0000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
            return 100;
         }
         if ((active0 & 0x40000181a0000000L) != 0L)
            return 99;
         return -1;
      case 4:
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xbfec740000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
            return 99;
         }
         if ((active0 & 0x23c0000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 4;
            return 100;
         }
         if ((active0 & 0x120a0200000000L) != 0L)
            return 99;
         return -1;
      case 5:
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xbfac700000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 84;
               jjmatchedPos = 5;
            }
            return 99;
         }
         if ((active0 & 0x1c0000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 5;
            }
            return 100;
         }
         if ((active0 & 0x40040000000000L) != 0L)
            return 99;
         return -1;
      case 6:
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x9fec400000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
            return 99;
         }
         if ((active0 & 0x1c0000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 6;
            return 100;
         }
         if ((active0 & 0x2000300000000000L) != 0L)
            return 99;
         return -1;
      case 7:
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x9fec000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 7;
            return 99;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 7;
            return 100;
         }
         if ((active0 & 0x400000000000L) != 0L)
            return 99;
         return -1;
      case 8:
         if ((active0 & 0x9fcc000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 8;
            return 99;
         }
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
            return 100;
         }
         if ((active0 & 0x20000000000000L) != 0L)
            return 99;
         return -1;
      case 9:
         if ((active0 & 0x17c8000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 9;
            return 99;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 9;
            return 100;
         }
         if ((active0 & 0x8804000000000000L) != 0L)
            return 99;
         return -1;
      case 10:
         if ((active0 & 0x17c8000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 10;
            return 99;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 10;
            return 100;
         }
         return -1;
      case 11:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 11;
            return 100;
         }
         if ((active0 & 0x15c0000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 11;
            return 99;
         }
         if ((active0 & 0x208000000000000L) != 0L)
            return 99;
         return -1;
      case 12:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 12;
            return 100;
         }
         if ((active0 & 0x15c0000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 12;
            return 99;
         }
         return -1;
      case 13:
         if ((active0 & 0x1080000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 13;
            return 99;
         }
         if ((active0 & 0x540000000000000L) != 0L)
            return 99;
         return -1;
      case 14:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 14;
            return 99;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 99;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 35:
         return jjStopAtPos(0, 35);
      case 37:
         return jjStopAtPos(0, 5);
      case 38:
         return jjStopAtPos(0, 38);
      case 40:
         return jjStopAtPos(0, 72);
      case 41:
         return jjStopAtPos(0, 73);
      case 42:
         return jjStopAtPos(0, 93);
      case 44:
         return jjStopAtPos(0, 64);
      case 46:
         return jjStopAtPos(0, 80);
      case 47:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x40L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 59:
         return jjStopAtPos(0, 74);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 63:
         return jjStopAtPos(0, 92);
      case 64:
         return jjStopAtPos(0, 69);
      case 66:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x180000L, 0x0L);
      case 71:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 80:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x3c00000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 75);
      case 93:
         return jjStopAtPos(0, 76);
      case 95:
         return jjStartNfaWithStates_0(0, 71, 14);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x900000004000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20400c0000000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80000400000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400200100000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x22018000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40000000a0000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x1009400000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 77);
      case 124:
         return jjStopAtPos(0, 89);
      case 125:
         return jjStopAtPos(0, 78);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 45:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 71:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 74:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4202110000180000L, active1, 0L);
      case 102:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 99);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x280000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80102000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000004040000L, active1, 0L);
      case 111:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 34, 99);
         return jjMoveStringLiteralDfa2_0(active0, 0x8010000010200000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000400000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 99);
         return jjMoveStringLiteralDfa2_0(active0, 0x40060020000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x820000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x400200000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c00000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000002200000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000040000L, active1, 0L);
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 99);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000400000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 99);
         return jjMoveStringLiteralDfa3_0(active0, 0x40240080000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x28200000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x208100000180000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x6010000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x820080000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4180000100000000L, active1, 0L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 99);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1040440000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 99);
         break;
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 99);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 99);
         return jjMoveStringLiteralDfa4_0(active0, 0x400100000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x208000000180000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000200240000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 99);
         return jjMoveStringLiteralDfa4_0(active0, 0xa0002000000L, active1, 0L);
      case 112:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 99);
         return jjMoveStringLiteralDfa4_0(active0, 0xa0000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c00000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 99);
         return jjMoveStringLiteralDfa4_0(active0, 0x2100000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(4, 70);
         break;
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xa000100000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 99);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 99);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 99);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000180000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 99);
         return jjMoveStringLiteralDfa5_0(active0, 0x2200000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 99);
         return jjMoveStringLiteralDfa5_0(active0, 0x1040440000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200001c40000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(5, 21);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x8800000000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1044400000000000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000180000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L);
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1c00000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x80100000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x120000000000000L);
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 99);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 99);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000001c40000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L);
      case 111:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 99);
         break;
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(7, 18);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(7, 20);
         break;
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000000L);
      case 66:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 99);
         break;
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x1008000000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0xc00000000000000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000080000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000001c00000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(8, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(8, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(8, 24);
         break;
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0xd00000000000000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000080000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8004000000000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L);
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 53, 99);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000080000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x500000000000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x1040000000000000L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 59, 99);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 63, 99);
         break;
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 50, 99);
         break;
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x700000000080000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L);
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 57, 99);
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0x1080000000000000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x500000000000000L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 51, 99);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000000L);
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000000L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x500000000000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(13, 19);
         break;
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000000L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 56, 99);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 58, 99);
         break;
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 54, 99);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000000L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 55, 99);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 60, 99);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 99;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(14);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(11);
                  }
                  break;
               case 80:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 97;
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(14);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAdd(13);
                  }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(14);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(11);
                  }
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(14);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(11);
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAddTwoStates(63, 64);
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 5);
                  else if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(14);
                  }
                  else if (curChar == 60)
                     jjAddStates(9, 12);
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x7000000000000000L & l) != 0L && kind > 82)
                     kind = 82;
                  break;
               case 5:
                  if (curChar == 60 && kind > 82)
                     kind = 82;
                  break;
               case 6:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 61 && kind > 82)
                     kind = 82;
                  break;
               case 8:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L && kind > 83)
                     kind = 83;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(11);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(14);
                  break;
               case 15:
               case 16:
                  if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  break;
               case 18:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 19:
                  if (curChar == 34 && kind > 90)
                     kind = 90;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddTwoStates(63, 64);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(63);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(64);
                  break;
               case 65:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 5);
                  break;
               case 66:
                  if (curChar == 39)
                     jjCheckNAddStates(13, 15);
                  break;
               case 68:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 69:
                  if (curChar == 39 && kind > 90)
                     kind = 90;
                  break;
               case 70:
                  if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  break;
               case 72:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 73:
                  if (curChar == 39 && kind > 91)
                     kind = 91;
                  break;
               case 74:
                  if (curChar == 60)
                     jjAddStates(9, 12);
                  break;
               case 75:
                  if (curChar == 62 && kind > 36)
                     kind = 36;
                  break;
               case 86:
                  if (curChar == 62 && kind > 37)
                     kind = 37;
                  break;
               case 92:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 98:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 29;
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 80:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 84;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 100:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAdd(13);
                  }
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 60;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 48;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 99:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(11);
                  }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(14);
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAdd(13);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAdd(11);
                  }
                  if (curChar == 100)
                     jjAddStates(19, 21);
                  else if (curChar == 97)
                     jjAddStates(22, 23);
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 10:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(14);
                  break;
               case 17:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  jjAddStates(6, 8);
                  break;
               case 20:
                  if (curChar == 97)
                     jjAddStates(22, 23);
                  break;
               case 21:
                  if (curChar == 97 && kind > 47)
                     kind = 47;
                  break;
               case 22:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 122 && kind > 47)
                     kind = 47;
                  break;
               case 27:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 100)
                     jjAddStates(19, 21);
                  break;
               case 32:
                  if (curChar == 108 && kind > 47)
                     kind = 47;
                  break;
               case 33:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 115 && kind > 47)
                     kind = 47;
                  break;
               case 40:
               case 50:
                  if (curChar == 108)
                     jjCheckNAdd(39);
                  break;
               case 41:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 67:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  jjAddStates(13, 15);
                  break;
               case 71:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  jjAddStates(16, 18);
                  break;
               case 76:
                  if (curChar == 103)
                     jjCheckNAdd(75);
                  break;
               case 77:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 81:
                  if (curChar == 71)
                     jjCheckNAdd(75);
                  break;
               case 82:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 87:
                  if (curChar == 103)
                     jjCheckNAdd(86);
                  break;
               case 88:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 93:
                  if (curChar == 71)
                     jjCheckNAdd(86);
                  break;
               case 94:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(6, 8);
                  break;
               case 68:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(13, 15);
                  break;
               case 72:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(16, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 99 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3fc0000L) != 0L)
         {
            jjmatchedKind = 17;
            return 0;
         }
         return -1;
      case 1:
         if ((active0 & 0x3fc0000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
            return 0;
         }
         return -1;
      case 2:
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 17;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x23c0000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 2;
            return 0;
         }
         return -1;
      case 3:
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 17;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x23c0000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 3;
            return 0;
         }
         return -1;
      case 4:
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 17;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x23c0000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 4;
            return 0;
         }
         return -1;
      case 5:
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 17;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1c0000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 5;
            return 0;
         }
         return -1;
      case 6:
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 17;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1c0000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 6;
            return 0;
         }
         return -1;
      case 7:
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 17;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 7;
            return 0;
         }
         return -1;
      case 8:
         if ((active0 & 0x1c00000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 17;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 8;
            return 0;
         }
         return -1;
      case 9:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 9;
            return 0;
         }
         return -1;
      case 10:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 10;
            return 0;
         }
         return -1;
      case 11:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 11;
            return 0;
         }
         return -1;
      case 12:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 12;
            return 0;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 44:
         return jjStopAtPos(0, 64);
      case 66:
         return jjMoveStringLiteralDfa1_4(0x180000L);
      case 71:
         return jjMoveStringLiteralDfa1_4(0x200000L);
      case 73:
         return jjMoveStringLiteralDfa1_4(0x40000L);
      case 80:
         return jjMoveStringLiteralDfa1_4(0x3c00000L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa2_4(active0, 0x1000000L);
      case 71:
         return jjMoveStringLiteralDfa2_4(active0, 0x400000L);
      case 82:
         return jjMoveStringLiteralDfa2_4(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa2_4(active0, 0x180000L);
      case 108:
         return jjMoveStringLiteralDfa2_4(active0, 0x2000000L);
      case 110:
         return jjMoveStringLiteralDfa2_4(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa2_4(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_4(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_4(active0, 0x1c00000L);
      case 97:
         return jjMoveStringLiteralDfa3_4(active0, 0x2200000L);
      case 99:
         return jjMoveStringLiteralDfa3_4(active0, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa3_4(active0, 0x180000L);
      default :
         break;
   }
   return jjStartNfa_4(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa4_4(active0, 0x180000L);
      case 108:
         return jjMoveStringLiteralDfa4_4(active0, 0x240000L);
      case 110:
         return jjMoveStringLiteralDfa4_4(active0, 0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa4_4(active0, 0x1c00000L);
      default :
         break;
   }
   return jjStartNfa_4(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_4(active0, 0x180000L);
      case 115:
         return jjMoveStringLiteralDfa5_4(active0, 0x2200000L);
      case 117:
         return jjMoveStringLiteralDfa5_4(active0, 0x1c40000L);
      default :
         break;
   }
   return jjStartNfa_4(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(5, 21);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_4(active0, 0x40000L);
      case 102:
         return jjMoveStringLiteralDfa6_4(active0, 0x180000L);
      case 108:
         return jjMoveStringLiteralDfa6_4(active0, 0x1c00000L);
      default :
         break;
   }
   return jjStartNfa_4(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa7_4(active0, 0x80000L);
      case 101:
         return jjMoveStringLiteralDfa7_4(active0, 0x1c40000L);
      case 115:
         return jjMoveStringLiteralDfa7_4(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_4(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(7, 18);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(7, 20);
         break;
      case 112:
         return jjMoveStringLiteralDfa8_4(active0, 0x80000L);
      case 115:
         return jjMoveStringLiteralDfa8_4(active0, 0x1c00000L);
      default :
         break;
   }
   return jjStartNfa_4(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(8, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(8, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(8, 24);
         break;
      case 100:
         return jjMoveStringLiteralDfa9_4(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_4(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_4(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_4(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa11_4(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_4(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa12_4(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_4(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa13_4(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_4(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(13, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_4(12, active0, 0L);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  kind = 17;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  kind = 17;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   67, 68, 69, 71, 72, 73, 17, 18, 19, 80, 85, 92, 98, 67, 68, 69, 
   71, 72, 73, 38, 49, 61, 25, 30, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\111\156\143\154\165\144\145\72", 
"\102\145\154\151\145\146\125\160\144\141\164\145\163\72", "\102\145\154\151\145\146\163\72", "\107\157\141\154\163\72", 
"\120\107\55\162\165\154\145\163\72", "\120\122\55\162\165\154\145\163\72", "\120\103\55\162\165\154\145\163\72", 
"\120\154\141\156\163\72", "\141\156\144", "\157\162", "\156\157\164", "\164\162\165\145", "\151\146", 
"\164\150\145\156", "\145\154\163\145", "\167\150\151\154\145", "\144\157", "\43", null, null, 
"\46", "\163\153\151\160", "\163\145\156\144", "\160\162\151\156\164", 
"\143\162\145\141\164\145", "\143\154\157\156\145", "\162\145\154\145\141\163\145", 
"\145\170\145\143\165\164\145", "\165\160\144\141\164\145\102\102", null, "\165\163\145", 
"\163\145\156\163\145", "\154\151\156\153\123\145\156\163\157\162", 
"\165\156\154\151\156\153\123\145\156\163\157\162", "\146\157\143\165\163", "\163\164\157\160\106\157\143\165\163", 
"\143\162\145\141\164\145\101\162\164\151\146\141\143\164", "\144\151\163\160\157\163\145\101\162\164\151\146\141\143\164", 
"\141\142\163\164\162\141\143\164\141\143\164\151\157\156", "\142\145\154\151\145\146\165\160\144\141\164\145", 
"\145\170\164\145\162\156\141\154\141\143\164\151\157\156", "\141\164\157\155\151\143\160\154\141\156", 
"\165\160\144\141\164\145\142\145\154\151\145\146\142\141\163\145", "\143\141\162\164\141\147\157", "\164\145\163\164", 
"\147\157\141\154\141\143\164\151\157\156", "\54", "\102", "\107", "\41\107", "\120", "\100", "\57\112\101\104\105", 
"\137", "\50", "\51", "\73", "\133", "\135", "\173", "\175", "\74\55", "\56", 
"\72\55", null, null, null, null, null, null, null, "\174", null, null, "\77", "\52", 
"\57", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMANT",
   "IN_FORMAL_COMMANT",
   "IN_MULTI_LINE_COMMANT",
   "IN_INCLUDE_SECTION",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, 4, 0, 0, 0, 0, 0, 0, 
   0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffe0001L, 0x7fffffffL, 
};
static final long[] jjtoSkip = {
   0x1ee1eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe00L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11e0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[99];
private final int[] jjstateSet = new int[198];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public Parser2aplTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public Parser2aplTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 99; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 4:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
